/**
 * Chuy·ªÉn ƒë·ªïi Markdown sang ƒë·ªãnh d·∫°ng ph√π h·ª£p cho t·ª´ng n·ªÅn t·∫£ng.
 * - Facebook / Zalo / LinkedIn: ch·ªâ h·ªó tr·ª£ text ƒë∆°n gi·∫£n, kh√¥ng h·ªó tr·ª£ markdown th·∫≠t s·ª±.
 * - Website: c√≥ th·ªÉ convert sang HTML ƒë·ªÉ render.
 */

// ===================== H√ÄM 1: FORMAT TEXT CHO N·ªÄN T·∫¢NG =====================

export function formatForPlatform(text: string, platform: 'facebook' | 'zalo' | 'linkedin' | 'twitter'): string {
  let formatted = text;

  // ======= L√†m s·∫°ch Markdown c∆° b·∫£n =======

  // In ƒë·∫≠m (**text** ho·∫∑c __text__) ‚Üí ch·ªâ gi·ªØ text (v√¨ Facebook kh√¥ng hi·ªÉu **)
  formatted = formatted.replace(/\*\*(.*?)\*\*/g, '$1'); // b·ªè ** ** 
  formatted = formatted.replace(/__(.*?)__/g, '$1');     // b·ªè __ __

  // In nghi√™ng (*text* ho·∫∑c _text_) ‚Üí ch·ªâ gi·ªØ text
  formatted = formatted.replace(/\*(.*?)\*/g, '$1'); // b·ªè * *
  formatted = formatted.replace(/_(.*?)_/g, '$1');   // b·ªè _ _

  // Link Markdown [text](url) ‚Üí text (url)
  formatted = formatted.replace(/\[(.*?)\]\((.*?)\)/g, '$1 ($2)');

  // Ti√™u ƒë·ªÅ Markdown (## ho·∫∑c ###) ‚Üí vi·∫øt hoa
  formatted = formatted.replace(/^### (.*)$/gm, 'üëâ $1');
  formatted = formatted.replace(/^## (.*)$/gm, 'üî• $1');
  formatted = formatted.replace(/^# (.*)$/gm, 'üåü $1');

  // Danh s√°ch g·∫°ch ƒë·∫ßu d√≤ng
  formatted = formatted.replace(/^- (.*)$/gm, '‚Ä¢ $1');

  // X√≥a code block ``` ```
  formatted = formatted.replace(/```[\s\S]*?```/g, '');

  // X√≥a inline code `code`
  formatted = formatted.replace(/`([^`]+)`/g, '$1');

  // X√≥a c√°c k√Ω t·ª± markdown c√≤n s√≥t
  formatted = formatted.replace(/> (.*)/g, 'üí¨ $1'); // quote block
  formatted = formatted.replace(/\n{3,}/g, '\n\n'); // r√∫t g·ªçn kho·∫£ng tr·∫Øng

  // Th√™m hashtag ho·∫∑c emoji n·∫øu mu·ªën c√° nh√¢n h√≥a theo platform
  if (platform === 'facebook') {
    formatted += '\n\n#ChiaSe #Inspire';
  } else if (platform === 'zalo') {
    formatted = formatted.replace(/üåü/g, '‚≠ê');
  }

  return formatted.trim();
}

// ===================== H√ÄM 2: CHUY·ªÇN MARKDOWN ‚Üí HTML =====================

/**
 * Convert Markdown sang HTML cho website.
 * S·ª≠ d·ª•ng c√°c regex c∆° b·∫£n ‚Äî kh√¥ng c·∫ßn th√™m lib n·∫øu mu·ªën nh·∫π.
 */
export function mdToHtml(markdown: string): string {
  let html = markdown;

  // Ti√™u ƒë·ªÅ
  html = html.replace(/^### (.*)$/gm, '<h3>$1</h3>');
  html = html.replace(/^## (.*)$/gm, '<h2>$1</h2>');
  html = html.replace(/^# (.*)$/gm, '<h1>$1</h1>');

  // In ƒë·∫≠m / nghi√™ng
  html = html.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
  html = html.replace(/\*(.*?)\*/g, '<em>$1</em>');

  // Link
  html = html.replace(/\[(.*?)\]\((.*?)\)/g, '<a href="$2" target="_blank">$1</a>');

  // Danh s√°ch
  const lines = html.split('\n');
  let inList = false;
  const processedLines = lines.map(line => {
    if (line.trim().startsWith('- ')) {
      if (!inList) {
        inList = true;
        return '<ul><li>' + line.replace(/^-\s*(.*)/, '$1') + '</li>';
      } else {
        return '<li>' + line.replace(/^-\s*(.*)/, '$1') + '</li>';
      }
    } else {
      if (inList) {
        inList = false;
        return line ? '</ul>' + line : line;
      }
      return line;
    }
  });

  if (inList) {
    processedLines[processedLines.length - 1] += '</ul>';
  }

  html = processedLines.join('\n');

  // Code block
  html = html.replace(/```([\s\S]*?)```/g, '<pre><code>$1</code></pre>');

  // Inline code
  html = html.replace(/`([^`]+)`/g, '<code>$1</code>');

  // Quote block
  html = html.replace(/^> (.*)$/gm, '<blockquote>$1</blockquote>');

  // Xu·ªëng d√≤ng
  html = html.replace(/\n{2,}/g, '</p><p>');
  html = `<p>${html}</p>`;

  return html.trim();
}
